
The same-origin policy is a security measure implemented by web browsers that restricts how documents or scripts loaded from one origin can interact with resources from another origin. An "origin" is defined by the combination of the protocol (http or https), the domain, and the port number. For example, https://example.com:443 is a different origin than http://example.com.

Workarounds for the Same-Origin Policy
    CORS (Cross-Origin Resource Sharing):

       CORS is a protocol that allows servers to specify who can access their resources and how. If a server is configured to allow cross-origin requests, it will include specific headers (like Access-Control-Allow-Origin) in its responses.
       Example:

       Access-Control-Allow-Origin: https://example.com

JSONP (JSON with Padding):

       JSONP is a technique that allows you to make requests to a server in a different origin by creating a <script> tag instead of using XMLHttpRequest. The server returns a JavaScript function call with the data wrapped in it.
        This method has limitations (like only supporting GET requests) and is less secure than CORS.

Proxying Requests:

       You can set up a server-side proxy that forwards requests from your origin to the target server. This way, your AJAX request goes to your server, which then makes the cross-origin request and sends the data back to your client.
       This is commonly used in development environments and APIs.

Using the fetch API:

       The fetch API also respects the same-origin policy, but you can use it in conjunction with CORS headers to enable cross-origin requests more easily.

Browser Extensions or Local Testing:

       For development purposes, you can use browser extensions that disable the same-origin policy. However, this is not recommended for production due to security risks.
       Running a local server (like using localhost) can also help bypass some issues related to same-origin policy during development.