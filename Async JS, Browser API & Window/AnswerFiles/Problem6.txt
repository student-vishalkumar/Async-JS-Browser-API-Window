The localStorage and sessionStorage APIs are part of the Web Storage API in web development, providing a way to store data in the browser. They both allow you to save key-value pairs, but they differ in terms of data persistence and scope.

1. localStorage

Purpose:
        localStorage is used to store data persistently in the browser. Data stored in localStorage does not expire and remains available even after the user closes the browser or navigates away from the page. It is specific to the origin (protocol, domain, and port).
Usage:
     Ideal for storing user preferences, application state, or any data that needs to persist across sessions.

Example:

        // Storing data
        localStorage.setItem('username', 'JohnDoe');

        // Retrieving data
        const username = localStorage.getItem('username');
        console.log(username); // Outputs: JohnDoe

        // Removing data
        localStorage.removeItem('username');

        // Clearing all data
        localStorage.clear();

2. sessionStorage:

Purpose:
        sessionStorage is used to store data for the duration of the page session. Data stored in sessionStorage is available only while the browser tab is open. Once the tab is closed, the data is cleared. It is also specific to the origin.

Usage:
     Ideal for storing temporary data that only needs to be available for a single session, such as form data or user input during a session.

Example:

        // Storing data
        sessionStorage.setItem('sessionID', 'abc123');

        // Retrieving data
        const sessionID = sessionStorage.getItem('sessionID');
        console.log(sessionID); // Outputs: abc123

        // Removing data
        sessionStorage.removeItem('sessionID');

        // Clearing all data
        sessionStorage.clear();

